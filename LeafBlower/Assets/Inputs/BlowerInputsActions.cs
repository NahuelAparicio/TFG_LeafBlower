//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Inputs/BlowerInputsActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @BlowerInputsActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @BlowerInputsActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""BlowerInputsActions"",
    ""maps"": [
        {
            ""name"": ""Blower"",
            ""id"": ""e8628b71-609b-4460-8bd0-a833fae2f59e"",
            ""actions"": [
                {
                    ""name"": ""Blow"",
                    ""type"": ""Button"",
                    ""id"": ""ef22dee1-2a42-4c00-b77f-d9060162aeca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aspire"",
                    ""type"": ""Button"",
                    ""id"": ""b53e401a-d411-448e-9d05-72029c54fa3c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BlowerMove"",
                    ""type"": ""Value"",
                    ""id"": ""b3cda24e-fa25-4069-9dcb-10984acc6c6b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""04d521fb-9897-4e76-a285-e8eb8b246dec"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Blow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""75420379-ee0d-41b0-846f-b163a59ea8be"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Blow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aed6e4fb-2415-4df6-8792-a50821dbc603"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Aspire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b5e26c9-2e8d-42d0-b9bc-83f6ef22dec0"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Aspire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7324ebfd-d7b4-423f-ad17-81093f4b08ef"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""BlowerMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d89194d-d8df-4a24-8cdf-ec334ab9885e"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""BlowerMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Controller"",
            ""bindingGroup"": ""Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Blower
        m_Blower = asset.FindActionMap("Blower", throwIfNotFound: true);
        m_Blower_Blow = m_Blower.FindAction("Blow", throwIfNotFound: true);
        m_Blower_Aspire = m_Blower.FindAction("Aspire", throwIfNotFound: true);
        m_Blower_BlowerMove = m_Blower.FindAction("BlowerMove", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Blower
    private readonly InputActionMap m_Blower;
    private List<IBlowerActions> m_BlowerActionsCallbackInterfaces = new List<IBlowerActions>();
    private readonly InputAction m_Blower_Blow;
    private readonly InputAction m_Blower_Aspire;
    private readonly InputAction m_Blower_BlowerMove;
    public struct BlowerActions
    {
        private @BlowerInputsActions m_Wrapper;
        public BlowerActions(@BlowerInputsActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Blow => m_Wrapper.m_Blower_Blow;
        public InputAction @Aspire => m_Wrapper.m_Blower_Aspire;
        public InputAction @BlowerMove => m_Wrapper.m_Blower_BlowerMove;
        public InputActionMap Get() { return m_Wrapper.m_Blower; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BlowerActions set) { return set.Get(); }
        public void AddCallbacks(IBlowerActions instance)
        {
            if (instance == null || m_Wrapper.m_BlowerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BlowerActionsCallbackInterfaces.Add(instance);
            @Blow.started += instance.OnBlow;
            @Blow.performed += instance.OnBlow;
            @Blow.canceled += instance.OnBlow;
            @Aspire.started += instance.OnAspire;
            @Aspire.performed += instance.OnAspire;
            @Aspire.canceled += instance.OnAspire;
            @BlowerMove.started += instance.OnBlowerMove;
            @BlowerMove.performed += instance.OnBlowerMove;
            @BlowerMove.canceled += instance.OnBlowerMove;
        }

        private void UnregisterCallbacks(IBlowerActions instance)
        {
            @Blow.started -= instance.OnBlow;
            @Blow.performed -= instance.OnBlow;
            @Blow.canceled -= instance.OnBlow;
            @Aspire.started -= instance.OnAspire;
            @Aspire.performed -= instance.OnAspire;
            @Aspire.canceled -= instance.OnAspire;
            @BlowerMove.started -= instance.OnBlowerMove;
            @BlowerMove.performed -= instance.OnBlowerMove;
            @BlowerMove.canceled -= instance.OnBlowerMove;
        }

        public void RemoveCallbacks(IBlowerActions instance)
        {
            if (m_Wrapper.m_BlowerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBlowerActions instance)
        {
            foreach (var item in m_Wrapper.m_BlowerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BlowerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BlowerActions @Blower => new BlowerActions(this);
    private int m_ControllerSchemeIndex = -1;
    public InputControlScheme ControllerScheme
    {
        get
        {
            if (m_ControllerSchemeIndex == -1) m_ControllerSchemeIndex = asset.FindControlSchemeIndex("Controller");
            return asset.controlSchemes[m_ControllerSchemeIndex];
        }
    }
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IBlowerActions
    {
        void OnBlow(InputAction.CallbackContext context);
        void OnAspire(InputAction.CallbackContext context);
        void OnBlowerMove(InputAction.CallbackContext context);
    }
}
